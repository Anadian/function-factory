2020-04-03T23:03:25.098Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-03T23:03:25.133Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:25.173Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-03T23:03:25.173Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-03T23:03:25.182Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-03T23:03:25.185Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go event_test' }
2020-04-03T23:03:25.187Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:25.189Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:25.191Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:25.193Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/event_test.json": Error: ENOENT: no such file or directory, open \'go/event_test.json\'',
  [length]: 2 ]
2020-04-03T23:03:25.194Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:25.195Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:03:25.197Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:03:25.198Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:03:25.227Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-03T23:03:35.411Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}\n' }
2020-04-03T23:03:35.411Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.412Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go event_test', event_name: 'path_test' } undefined
2020-04-03T23:03:35.412Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.413Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.413Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.414Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/event_test.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/event_test.hbs\'',
  [length]: 2 ]
2020-04-03T23:03:35.414Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.415Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:03:35.415Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:03:35.415Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:03:35.425Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.425Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-03T23:03:35.425Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-03T23:03:35.425Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [ 0,
    '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-03T23:03:35.426Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-03T23:03:35.426Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '\n\t\t//Create event path_test\n\t\tfunction_return = NewEvent( "event_listener:path_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:path_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event path_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go event_test' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:03:35.463Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-03T23:03:35.465Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-03T23:04:17.024Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-03T23:04:17.031Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:17.032Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-03T23:04:17.032Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-03T23:04:17.034Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-03T23:04:17.034Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go event_test' }
2020-04-03T23:04:17.035Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:17.035Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:17.036Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:17.036Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/event_test.json": Error: ENOENT: no such file or directory, open \'go/event_test.json\'',
  [length]: 2 ]
2020-04-03T23:04:17.036Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:17.037Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:04:17.037Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:04:17.037Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:04:17.051Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-03T23:04:42.967Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "regexpath_test"\n}\n' }
2020-04-03T23:04:42.967Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "regexpath_test"\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.968Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go event_test', event_name: 'regexpath_test' } undefined
2020-04-03T23:04:42.968Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.969Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.969Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.969Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/event_test.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/event_test.hbs\'',
  [length]: 2 ]
2020-04-03T23:04:42.970Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.970Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:04:42.971Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:04:42.971Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-03T23:04:42.981Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.981Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-03T23:04:42.981Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-03T23:04:42.981Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [ 0,
    '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-03T23:04:42.982Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-03T23:04:42.982Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '\n\t\t//Create event regexpath_test\n\t\tfunction_return = NewEvent( "event_listener:regexpath_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regexpath_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regexpath_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go event_test' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:04:42.989Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-03T23:04:42.990Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-03T23:05:25.894Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-03T23:05:25.901Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:05:25.902Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-03T23:05:25.902Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-03T23:05:25.904Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-03T23:05:25.904Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go event_test' }
2020-04-03T23:05:25.904Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:05:25.905Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:05:25.905Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:05:25.905Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/event_test.json": Error: ENOENT: no such file or directory, open \'go/event_test.json\'',
  [length]: 2 ]
2020-04-03T23:05:25.906Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-03T23:05:25.906Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:05:25.906Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:05:25.906Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-03T23:05:25.919Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-04T08:23:59.134Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "regex-test"\n}\n' }
2020-04-04T08:23:59.136Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "regex-test"\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.138Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go event_test', event_name: 'regex-test' } undefined
2020-04-04T08:23:59.140Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.142Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.144Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.145Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/event_test.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/event_test.hbs\'',
  [length]: 2 ]
2020-04-04T08:23:59.146Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.239Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:23:59.240Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:23:59.242Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:23:59.450Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.451Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-04T08:23:59.453Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-04T08:23:59.454Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [ 0,
    '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-04T08:23:59.455Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-04T08:23:59.458Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '\n\t\t//Create event regex-test\n\t\tfunction_return = NewEvent( "event_listener:regex-test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:regex-test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event regex-test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go event_test' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:23:59.595Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-04T08:23:59.596Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-04T08:24:31.907Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-04T08:24:31.947Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:31.990Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-04T08:24:31.990Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-04T08:24:31.992Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-04T08:24:31.993Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go event_test' }
2020-04-04T08:24:31.994Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:31.995Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:31.995Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:31.996Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/event_test.json": Error: ENOENT: no such file or directory, open \'go/event_test.json\'',
  [length]: 2 ]
2020-04-04T08:24:31.996Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/event_test.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:32.016Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-04T08:24:32.016Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-04T08:24:32.017Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go event_test",\n\t"event_name": "path_test"\n}',
  [length]: 2 ]
2020-04-04T08:24:32.034Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-04T08:24:56.775Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "01_test"\n}\n' }
2020-04-04T08:24:56.776Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go event_test",\n\t"event_name": "01_test"\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.777Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go event_test', event_name: '01_test' } undefined
2020-04-04T08:24:56.777Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go event_test',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.778Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.778Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.779Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/event_test.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/event_test.hbs\'',
  [length]: 2 ]
2020-04-04T08:24:56.779Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/event_test.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:24:56.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:24:56.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-04T08:24:56.793Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.793Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-04T08:24:56.793Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-04T08:24:56.794Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [ 0,
    '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-04T08:24:56.794Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  [length]: 2 ]
2020-04-04T08:24:56.795Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '\n\t\t//Create event 01_test\n\t\tfunction_return = NewEvent( "event_listener:01_test", map[string]interface{}{} );\n\t\tif( function_return.NoError() == true ){\n\t\t\tlog.Printf("Success: Event event_lister:01_test created successfully.\\n",);\n\t\t\tevent = function_return.Data["event"].(Event_struct);\n\t\t\tfunction_return = event_dispatcher.PushEvent(event);\n\t\t\tif( function_return.NoError() == true ){\n\t\t\t\tlog.Printf("Success: Event 01_test pushed successfully.\\n");\n\t\t\t} else{\n\t\t\t\tlog.Printf("Failure: event_dispatcher.PushEvent returned an error: %v\\n", function_return);\n\t\t\t}\n\t\t} else{\n\t\t\tlog.Printf("Failure: NewEvent returned an error: %v\\n", error);\n\t\t}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go event_test' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-04T08:24:56.804Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-04T08:24:56.805Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-05T02:10:56.135Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-05T02:10:56.160Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:10:56.198Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-05T02:10:56.199Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-05T02:10:56.206Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-05T02:10:56.209Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-05T02:10:56.211Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:10:56.213Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:10:56.214Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:10:56.216Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-05T02:10:56.216Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:10:56.233Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:10:56.234Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:10:56.236Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:10:56.264Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-05T02:13:31.368Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "ProcessEvents",\n\t"description": "Processes all of the events in the queue.",\n\t"preceding_struct": {\n\t\t"name": "event_dispatcher",\n\t\t"type": "EventDispatcher_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-05T02:13:31.371Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "ProcessEvents",\n\t"description": "Processes all of the events in the queue.",\n\t"preceding_struct": {\n\t\t"name": "event_dispatcher",\n\t\t"type": "EventDispatcher_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.374Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'ProcessEvents',
  description: 'Processes all of the events in the queue.',
  preceding_struct: { name: 'event_dispatcher', type: 'EventDispatcher_struct' },
  parameters: [ [length]: 0 ],
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-05T02:13:31.375Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.376Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.377Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.378Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-05T02:13:31.378Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.416Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:13:31.417Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:13:31.417Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:13:31.452Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct,) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.452Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T02:13:31.453Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-05T02:13:31.453Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T02:13:31.453Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @fn ProcessEvents\n* @brief Processes all of the events in the queue.\n* @struct event_dispatcher EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ProcessEvents processes all of the events in the queue.\nfunc (event_dispatcher EventDispatcher_struct) ProcessEvents() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:13:31.501Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-05T02:13:31.502Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-05T02:23:49.901Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-05T02:23:49.907Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:23:49.908Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-05T02:23:49.908Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-05T02:23:49.909Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-05T02:23:49.910Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-05T02:23:49.910Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:23:49.911Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:23:49.911Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:23:49.911Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-05T02:23:49.912Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:23:49.912Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:23:49.912Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:23:49.912Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:23:49.925Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-05T02:25:27.354Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "ShiftEvent",\n\t"description": "Extracts and returns the first event in the queue.",\n\t"preceding_struct": {\n\t\t"name": "event_dispatcher",\n\t\t"type": "*EventDispatcher_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-05T02:25:27.354Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "ShiftEvent",\n\t"description": "Extracts and returns the first event in the queue.",\n\t"preceding_struct": {\n\t\t"name": "event_dispatcher",\n\t\t"type": "*EventDispatcher_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.356Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'ShiftEvent',
  description: 'Extracts and returns the first event in the queue.',
  preceding_struct: { name: 'event_dispatcher', type: '*EventDispatcher_struct' },
  parameters: [ [length]: 0 ],
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-05T02:25:27.356Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.356Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.357Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.357Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-05T02:25:27.357Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.358Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:25:27.358Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:25:27.358Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T02:25:27.382Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct,) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.382Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T02:25:27.382Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-05T02:25:27.382Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T02:25:27.383Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @fn ShiftEvent\n* @brief Extracts and returns the first event in the queue.\n* @struct event_dispatcher *EventDispatcher_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// ShiftEvent extracts and returns the first event in the queue.\nfunc (event_dispatcher *EventDispatcher_struct) ShiftEvent() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:25:27.388Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-05T02:25:27.388Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-05T02:48:47.780Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-05T02:48:47.786Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:48:47.788Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-05T02:48:47.788Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-05T02:48:47.789Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-05T02:48:47.789Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-05T02:48:47.790Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:48:47.790Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:48:47.790Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:48:47.791Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-05T02:48:47.791Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T02:48:47.791Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:48:47.792Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:48:47.792Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T02:48:47.803Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-05T03:03:24.611Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "GetWrappedBottom",\n\t"description": "Returns the deepest wrapped report.",\n\t"preceding_struct": {\n\t\t"name": "error_report",\n\t\t"type": "*ErrorReport_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-05T03:03:24.612Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "GetWrappedBottom",\n\t"description": "Returns the deepest wrapped report.",\n\t"preceding_struct": {\n\t\t"name": "error_report",\n\t\t"type": "*ErrorReport_struct"\n\t},\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.613Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'GetWrappedBottom',
  description: 'Returns the deepest wrapped report.',
  preceding_struct: { name: 'error_report', type: '*ErrorReport_struct' },
  parameters: [ [length]: 0 ],
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-05T03:03:24.613Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.613Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.613Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.614Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-05T03:03:24.614Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.614Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:03:24.615Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:03:24.615Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:03:24.640Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct,) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.640Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T03:03:24.640Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-05T03:03:24.641Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T03:03:24.641Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @fn GetWrappedBottom\n* @brief Returns the deepest wrapped report.\n* @struct error_report *ErrorReport_struct\n* @return ( return_report error_report.ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// GetWrappedBottom returns the deepest wrapped report.\nfunc (error_report *ErrorReport_struct) GetWrappedBottom() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:03:24.647Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-05T03:03:24.647Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-05T03:13:43.343Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-05T03:13:43.349Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:13:43.350Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-05T03:13:43.350Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-05T03:13:43.352Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-05T03:13:43.352Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-05T03:13:43.352Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:13:43.353Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:13:43.353Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:13:43.353Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-05T03:13:43.353Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:13:43.354Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T03:13:43.354Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T03:13:43.354Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-05T03:13:43.366Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-05T03:15:27.013Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "TestGetWrappedBottom",\n\t"description": "Test error_report.GetWrappedBottom",\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-05T03:15:27.013Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "TestGetWrappedBottom",\n\t"description": "Test error_report.GetWrappedBottom",\n\t"parameters": [\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.014Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'TestGetWrappedBottom',
  description: 'Test error_report.GetWrappedBottom',
  parameters: [ [length]: 0 ],
  return: 
   { return_values: 
      [ { name: 'return_report', type: 'ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-05T03:15:27.015Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.015Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.015Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.016Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-05T03:15:27.016Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.016Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:15:27.017Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:15:27.017Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-05T03:15:27.044Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct,) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.044Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T03:15:27.044Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-05T03:15:27.044Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-05T03:15:27.045Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @fn TestGetWrappedBottom\n* @brief Test error_report.GetWrappedBottom\n* @return ( return_report ErrorReport_struct ) \n* @retval 0 Success\n* @retval 1 Not Supported\n* @retval >1 Error\n*/\n\n// TestGetWrappedBottom test error_report.GetWrappedBottom\nfunc  TestGetWrappedBottom() ( return_report ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-05T03:15:27.052Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-05T03:15:27.052Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-12T04:25:49.312Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-12T04:25:49.346Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:25:49.378Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-12T04:25:49.378Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-12T04:25:49.382Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-12T04:25:49.383Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-12T04:25:49.384Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:25:49.385Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:25:49.385Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:25:49.386Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-12T04:25:49.386Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:25:49.401Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:25:49.402Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:25:49.403Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:25:49.428Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-12T04:26:28.561Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-12T04:26:28.563Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameters": [\n\t\t{\n\t\t\t"name": "alignment",\n\t\t\t"type": "uint8",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "centre",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t},\n\t\t{\n\t\t\t"name": "velocity",\n\t\t\t"type": "Vector_type",\n\t\t\t"flow": "in",\n\t\t\t"description": ""\n\t\t}\n\t],\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.566Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'FunctionName',
  description: 'Function description.',
  preceding_struct: { name: 'struct_name', type: '*Struct_type' },
  parameters: 
   [ { name: 'alignment', type: 'uint8', flow: 'in', description: '' },
     { name: 'centre',
       type: 'Vector_type',
       flow: 'in',
       description: '' },
     { name: 'velocity',
       type: 'Vector_type',
       flow: 'in',
       description: '' },
     [length]: 3 ],
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-12T04:26:28.568Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.569Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.571Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.572Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-12T04:26:28.572Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.575Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:26:28.575Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:26:28.576Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:26:28.608Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,)`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct,)`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,) ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.608Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type )`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct )`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:26:28.609Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type )`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct )`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type )`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct )`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-12T04:26:28.609Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type )`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct )`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:26:28.609Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* ### FunctionName\n* `(struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type )`\n* > Function description.\n* #### Parametres\n* - `alignment uint8` \n* #### Parametres\n* - `centre Vector_type` \n* #### Parametres\n* - `velocity Vector_type` \n* #### Return \n* `( return_report error_report.ErrorReport_struct )`\n* ##### Possible Report Codes and Additional Properties\n* - `0` Success\n* - `1` Not Supported\n* - `>1` Error\n\n* #### Status and History\n* - v0.0.0 Reserved*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:26:28.639Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-12T04:26:28.640Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-12T04:39:06.694Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-12T04:39:06.700Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:06.701Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-12T04:39:06.701Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-12T04:39:06.703Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-12T04:39:06.703Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-12T04:39:06.704Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:06.704Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:06.704Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:06.705Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-12T04:39:06.705Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:06.706Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-12T04:39:29.525Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-12T04:39:29.531Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:29.532Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-12T04:39:29.532Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-12T04:39:29.534Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-12T04:39:29.534Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-12T04:39:29.535Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:29.535Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:29.535Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:29.536Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-12T04:39:29.536Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:29.536Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:39:29.537Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:39:29.537Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:39:29.550Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-12T04:39:32.911Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-12T04:39:32.911Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.912Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'FunctionName',
  description: 'Function description.',
  preceding_struct: { name: 'struct_name', type: '*Struct_type' },
  parameter: 
   { parameters: 
      [ { name: 'alignment', type: 'uint8', flow: 'in', description: '' },
        { name: 'centre',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        { name: 'velocity',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        [length]: 3 ] },
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-12T04:39:32.912Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.913Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.913Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.913Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-12T04:39:32.913Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.914Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:39:32.914Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:39:32.914Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:39:32.939Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct,)`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.939Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:39:32.939Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-12T04:39:32.939Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:39:32.940Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n### FunctionName\n```go\n(struct_name *Struct_type) FunctionName()\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName() ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:39:32.946Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-12T04:39:32.946Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-12T04:44:45.663Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-12T04:44:45.669Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:45.670Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-12T04:44:45.670Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-12T04:44:45.672Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-12T04:44:45.672Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-12T04:44:45.672Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:45.673Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:45.673Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:45.674Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-12T04:44:45.674Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:45.674Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:44:45.675Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:44:45.675Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:44:45.687Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-12T04:44:48.886Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-12T04:44:48.887Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.887Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'FunctionName',
  description: 'Function description.',
  preceding_struct: { name: 'struct_name', type: '*Struct_type' },
  parameter: 
   { parameters: 
      [ { name: 'alignment', type: 'uint8', flow: 'in', description: '' },
        { name: 'centre',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        { name: 'velocity',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        [length]: 3 ] },
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-12T04:44:48.888Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.888Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.888Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.888Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-12T04:44:48.889Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.889Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:44:48.890Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:44:48.890Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:44:48.916Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct,)`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,) ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.916Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:44:48.916Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-12T04:44:48.916Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:44:48.917Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n- `alignment uint8` \n- `centre Vector_type` \n- `velocity Vector_type` \n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n- `0` Success\n- `1` Not Supported\n- `>1` Error\n\n#### Status and History\n- v0.0.0 Reserved\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:44:48.924Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-12T04:44:48.924Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-12T04:51:54.511Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-12T04:51:54.518Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:54.519Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-12T04:51:54.519Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-12T04:51:54.520Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-12T04:51:54.521Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'go func' }
2020-04-12T04:51:54.521Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:54.521Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:54.522Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:54.522Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "go/func.json": Error: ENOENT: no such file or directory, open \'go/func.json\'',
  [length]: 2 ]
2020-04-12T04:51:54.522Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/go/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:54.523Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:51:54.523Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:51:54.523Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-12T04:51:54.537Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-12T04:51:57.796Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-12T04:51:57.796Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "go func",\n\t"name": "FunctionName",\n\t"description": "Function description.",\n\t"preceding_struct": {\n\t\t"name": "struct_name",\n\t\t"type": "*Struct_type"\n\t},\n\t"parameter": {\n\t\t"parameters": [\n\t\t\t{\n\t\t\t\t"name": "alignment",\n\t\t\t\t"type": "uint8",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "centre",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t},\n\t\t\t{\n\t\t\t\t"name": "velocity",\n\t\t\t\t"type": "Vector_type",\n\t\t\t\t"flow": "in",\n\t\t\t\t"description": ""\n\t\t\t}\n\t\t]\n\t},\n\t"return": {\n\t\t"return_values": [\n\t\t\t{\n\t\t\t\t"name": "return_report",\n\t\t\t\t"type": "error_report.ErrorReport_struct"\n\t\t\t}\n\t\t],\n\t\t"report_codes": [\n\t\t\t{\n\t\t\t\t"code": 0,\n\t\t\t\t"description": "Success"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": 1,\n\t\t\t\t"description": "Not Supported"\n\t\t\t},\n\t\t\t{\n\t\t\t\t"code": ">1",\n\t\t\t\t"description": "Error"\n\t\t\t}\n\t\t]\n\t},\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t},\n\t\t{\n\t\t\t"search": ",;",\n\t\t\t"replace": ";",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.797Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'go func',
  name: 'FunctionName',
  description: 'Function description.',
  preceding_struct: { name: 'struct_name', type: '*Struct_type' },
  parameter: 
   { parameters: 
      [ { name: 'alignment', type: 'uint8', flow: 'in', description: '' },
        { name: 'centre',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        { name: 'velocity',
          type: 'Vector_type',
          flow: 'in',
          description: '' },
        [length]: 3 ] },
  return: 
   { return_values: 
      [ { name: 'return_report',
          type: 'error_report.ErrorReport_struct' },
        [length]: 1 ],
     report_codes: 
      [ { code: 0, description: 'Success' },
        { code: 1, description: 'Not Supported' },
        { code: '>1', description: 'Error' },
        [length]: 3 ] },
  post_re: 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ] } undefined
2020-04-12T04:51:57.798Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'go func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.798Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.798Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.798Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "go/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'go/func.hbs\'',
  [length]: 2 ]
2020-04-12T04:51:57.799Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/go/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.799Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:51:57.799Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:51:57.800Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-12T04:51:57.825Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct,)`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type,) ( return_report error_report.ErrorReport_struct,){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report,;\n}\n',
  '1': 
   [ { search: ',\\)', replace: ' )', flags: 'gm' },
     { search: ',;', replace: ';', flags: 'gm' },
     [length]: 2 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.825Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:51:57.825Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [ 0,
    '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-12T04:51:57.826Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  [length]: 2 ]
2020-04-12T04:51:57.826Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n### FunctionName\n```go\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) error_report.ErrorReport_struct\n```\n> Function description.\n#### Parametres\n| Name and Type | Description |\n| --- | --- |\n| `alignment uint8` |  |\n| `centre Vector_type` |  |\n| `velocity Vector_type` |  |\n#### Return \n`( return_report error_report.ErrorReport_struct )`\n##### Possible Report Codes and Additional Properties\n| Code | Description and Additional Properties |\n| --- | --- |\n| `0` | Success |\n| `1` | Not Supported |\n| `>1` | Error |\n\n#### Status and History\n| Version | Status and Changes |\n| --- | --- |\n| v0.0.0 | Reserved |\n*/\n\n// FunctionName function description.\nfunc (struct_name *Struct_type) FunctionName( alignment uint8, centre Vector_type, velocity Vector_type ) ( return_report error_report.ErrorReport_struct ){\n\t//Variables\n\t//Parametres\n\t//Function\n\t//Return\n\treturn return_report;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'go func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-12T04:51:57.833Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-12T04:51:57.833Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-13T03:54:55.562Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-13T03:54:55.593Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:54:55.631Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-13T03:54:55.631Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-13T03:54:55.633Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-13T03:54:55.633Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js file' }
2020-04-13T03:54:55.634Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:54:55.634Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:54:55.635Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:54:55.635Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/file.json": Error: ENOENT: no such file or directory, open \'js/file.json\'',
  [length]: 2 ]
2020-04-13T03:54:55.635Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:54:55.636Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-13T03:54:55.636Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-13T03:54:55.637Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-13T03:54:55.655Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-13T03:55:05.011Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' }
2020-04-13T03:55:05.012Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.013Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js file',
  filename: 'filename.js',
  description: 'Brief description.',
  modulename: 'ModuleName',
  processname: 'process-name',
  strict: true,
  main: true,
  logger: true,
  cli: true } undefined
2020-04-13T03:55:05.014Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.014Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.015Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.015Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/file.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/file.hbs\'',
  [length]: 2 ]
2020-04-13T03:55:05.016Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.017Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-13T03:55:05.018Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-13T03:55:05.018Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-13T03:55:05.052Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.052Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-13T03:55:05.052Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
  [length]: 2 ]
2020-04-13T03:55:05.053Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
  [ 0,
    '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-13T03:55:05.054Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
  [length]: 2 ]
2020-04-13T03:55:05.055Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @alias SetLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\t\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\t\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t\t\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.SetLogger = Logger_Set;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js file' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-13T03:55:05.085Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-13T03:55:05.086Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-14T02:23:23.566Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-14T02:23:23.581Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:23.605Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-14T02:23:23.605Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-14T02:23:23.607Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-14T02:23:23.607Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js file' }
2020-04-14T02:23:23.608Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:23.608Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:23.609Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:23.609Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/file.json": Error: ENOENT: no such file or directory, open \'js/file.json\'',
  [length]: 2 ]
2020-04-14T02:23:23.609Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:23.616Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-14T02:23:23.616Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-14T02:23:23.616Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-14T02:23:23.631Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-14T02:23:28.342Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' }
2020-04-14T02:23:28.344Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.346Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js file',
  filename: 'filename.js',
  description: 'Brief description.',
  modulename: 'ModuleName',
  processname: 'process-name',
  strict: true,
  main: true,
  logger: true,
  cli: true } undefined
2020-04-14T02:23:28.348Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.349Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.351Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.352Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/file.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/file.hbs\'',
  [length]: 2 ]
2020-04-14T02:23:28.352Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.354Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-14T02:23:28.355Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-14T02:23:28.356Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-14T02:23:28.382Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.382Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-14T02:23:28.383Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
  [length]: 2 ]
2020-04-14T02:23:28.383Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
  [ 0,
    '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-14T02:23:28.384Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
  [length]: 2 ]
2020-04-14T02:23:28.384Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ModuleName\n* @file filename.js\n* @alias source/main.js\n* @description Brief description.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'filename.js\';\nconst MODULE_NAME = \'ModuleName\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'process-name\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function Logger_Set\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction Logger_Set( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'Logger_Set\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tLogger_Set( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\t\t\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'process-name\',\n\t\t\t\tcontent: \'Brief description.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.Logger_Set = Logger_Set;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js file' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-14T02:23:28.413Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-14T02:23:28.413Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-15T08:36:24.667Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T08:36:24.702Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:36:24.742Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T08:36:24.743Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T08:36:24.751Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T08:36:24.753Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js file' }
2020-04-15T08:36:24.756Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:36:24.759Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:36:24.762Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:36:24.763Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/file.json": Error: ENOENT: no such file or directory, open \'js/file.json\'',
  [length]: 2 ]
2020-04-15T08:36:24.765Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/file.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:36:24.773Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-15T08:36:24.773Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-15T08:36:24.774Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js file",\n\t"filename": "filename.js",\n\t"description": "Brief description.",\n\t"modulename": "ModuleName",\n\t"processname": "process-name",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}',
  [length]: 2 ]
2020-04-15T08:36:24.796Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T08:40:11.329Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js file",\n\t"filename": "extract-documentation-comments.js",\n\t"description": "Simply extract documentation comments from a source file.",\n\t"modulename": "ExtractDocumentationComments",\n\t"processname": "extract-documentation-comments",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' }
2020-04-15T08:40:11.332Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js file",\n\t"filename": "extract-documentation-comments.js",\n\t"description": "Simply extract documentation comments from a source file.",\n\t"modulename": "ExtractDocumentationComments",\n\t"processname": "extract-documentation-comments",\n\t"strict": true,\n\t"main": true,\n\t"logger": true,\n\t"cli": true\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.335Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js file',
  filename: 'extract-documentation-comments.js',
  description: 'Simply extract documentation comments from a source file.',
  modulename: 'ExtractDocumentationComments',
  processname: 'extract-documentation-comments',
  strict: true,
  main: true,
  logger: true,
  cli: true } undefined
2020-04-15T08:40:11.337Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js file',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.338Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.339Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.340Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/file.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/file.hbs\'',
  [length]: 2 ]
2020-04-15T08:40:11.341Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/file.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.363Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T08:40:11.365Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T08:40:11.367Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T08:40:11.410Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
  '1': undefined,
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.411Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:warn: Warn: post_re is null: undefined
2020-04-15T08:40:11.411Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
  [length]: 2 ]
2020-04-15T08:40:11.411Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
  [ 0,
    '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-15T08:40:11.412Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
  [length]: 2 ]
2020-04-15T08:40:11.413Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '#!/usr/local/bin/node\n\'use strict\';\n/**\n* @module ExtractDocumentationComments\n* @file extract-documentation-comments.js\n* @alias source/main.js\n* @description Simply extract documentation comments from a source file.\n* @author Anadian\n* @license \tCopyright 2020 Anadian\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the "Software"), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to \npermit persons to whom the Software is furnished to do so, subject to the following \nconditions:\n\tThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF \nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n//#Dependencies\n\t//##Internal\n\t//##Standard\n\tconst Utility = require(\'util\');\n\t//##External\n\n//#Constants\nconst FILENAME = \'extract-documentation-comments.js\';\nconst MODULE_NAME = \'ExtractDocumentationComments\';\nvar PROCESS_NAME = \'\';\nif(require.main === module){\n\tPROCESS_NAME = \'extract-documentation-comments\';\n} else{\n\tPROCESS_NAME = process.argv0;\n}\n//##Errors\n\n//#Global Variables\nvar Logger = { \n\tlog: () => {\n\t\treturn null;\n\t}\n};\n//#Functions\n/**\n* @function setLogger\n* @access public\n* @description Allows this module\'s functions to log the given logger object.\n* @param {?object} logger - The logger to be used for logging or `null` to disable logging.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. \n* @since v0.0.0\n*/\nfunction setLogger( logger ){\n\tvar return_error = null;\n\tconst FUNCTION_NAME = \'setLogger\';\n\t//Variables\n\t//Parametre checks\n\tif( typeof(logger) === \'object\' ){\n\t\tif( logger === null ){\n\t\t\tlogger = { \n\t\t\t\tlog: () => {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t} else{\n\t\treturn_error = new TypeError(\'Param "logger" is not an object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\n\t//Function\n\tLogger = logger;\n\t//Return\n}\n\n//#Exports and Execution\nif(require.main === module){\n\tvar _return = [1,null];\n\tconst FUNCTION_NAME = \'MainExecutionFunction\';\n\t//##Dependencies\n\t\t//###Internal\n\t\t//###Standard\n\t\t//###External\n\t\tconst MakeDir = require(\'make-dir\');\n\t\tconst ApplicationLogWinstonInterface = require(\'application-log-winston-interface\');\n\t\tconst EnvPaths = require(\'env-paths\');\n\t\tconst CommandLineArgs = require(\'command-line-args\');\n\t\tconst CommandLineUsage = require(\'command-line-usage\');\n\t//Constants\n\tconst EnvironmentPaths = EnvPaths( PROCESS_NAME );\n\tconst OptionDefinitions = [\n\t\t//UI\n\t\t{ name: \'help\', alias: \'h\', type: Boolean, description: \'Writes this help text to stdout.\' },\n\t\t{ name: \'noop\', alias: \'n\', type: Boolean, description: \'Show what would be done without actually doing it.\' },\n\t\t{ name: \'verbose\', alias: \'v\', type: Boolean, description: \'Verbose output to stderr.\' },\n\t\t{ name: \'version\', alias: \'V\', type: Boolean, description: \'Writes version information to stdout.\'},\n\t\t//Input\n\t\t{ name: \'stdin\', alias: \'i\', type: Boolean, description: \'Read input from stdin.\' },\n\t\t{ name: \'input\', alias: \'I\', type: String, description: \'The path to the file to read input from.\'},\n\t\t//Output\n\t\t{ name: \'stdout\', alias: \'o\', type: Boolean, description: \'Write output to stdout.\' },\n\t\t{ name: \'output\', alias: \'O\', type: String, description: \'The name of the file to write output to.\' },\n\t\t{ name: \'pasteboard\', alias: \'p\', type: Boolean, description: \'Copy output to pasteboard (clipboard).\'},\n\t\t//Config\n\t\t{ name: \'config\', alias: \'c\', type: Boolean, description: \'Print configuration values and information to stdout.\' },\n\t\t{ name: \'config-file\', alias: \'C\', type: String, description: \'Use the given config file instead of the default.\' },\n\t];\n\t//Variables\n\tvar function_return = [1,null];\n\t//Logger\n\ttry{ \n\t\tMakeDir.sync( EnvironmentPaths.log );\n\t} catch(error){\n\t\tconsole.error(\'MakeDir.sync threw: %s\', error);\n\t}\n\tfunction_return = ApplicationLogWinstonInterface.InitLogger(\'debug.log\', EnvironmentPaths.log);\n\tif( function_return[0] === 0 ){\n\t\tsetLogger( function_return[1] );\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'Start of execution block.\'});\n\t//Options\n\tvar Options = CommandLineArgs( OptionDefinitions );\n\t//Config\n\tif( Options.verbose === true ){\n\t\tlogger.real_transports.console_stderr.level = \'debug\';\n\t\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'note\', message: Utility.format(\'Logger: console_stderr transport log level set to: %s\', logger.real_transports.console_stderr.level)});\n\t}\n\t//Main\n\tif(Options.help === true){\n\t\tconst help_sections_array = [\n\t\t\t{\n\t\t\t\theader: \'extract-documentation-comments\',\n\t\t\t\tcontent: \'Simply extract documentation comments from a source file.\',\n\t\t\t},\n\t\t\t{\n\t\t\t\theader: \'Options\',\n\t\t\t\toptionList: OptionDefinitions\n\t\t\t}\n\t\t]\n\t\tconst help_message = CommandLineUsage(help_sections_array);\n\t\tconsole.log(help_message);\n\t}\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: \'End of execution block.\'});\n} else{\n\texports.setLogger = setLogger;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js file' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T08:40:11.477Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-15T08:40:11.479Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-15T21:05:19.336Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T21:05:19.370Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:05:19.386Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T21:05:19.386Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T21:05:19.388Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T21:05:19.388Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-04-15T21:05:19.389Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:05:19.389Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:05:19.390Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:05:19.390Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open \'js/func.json\'',
  [length]: 2 ]
2020-04-15T21:05:19.390Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:05:19.391Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:05:19.391Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:05:19.391Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:05:19.406Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T21:14:44.485Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if "source_buffer" isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-15T21:14:44.487Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if "source_buffer" isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:14:44.494Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:error: [ -4,
  'Error: inquirer_questions [ { type: \'editor\',\n    name: \'editor_input\',\n    message: \'Enter input context (JSON).\',\n    default: \'{\\n\\t"template": "js func",\\n\\t"name": "FunctionName",\\n\\t"description": "Brief description.",\\n\\t"params": [\\n\\t\\t{\\n\\t\\t\\t"type": "ArgumentType",\\n\\t\\t\\t"name": "parametre_name",\\n\\t\\t\\t"default": null,\\n\\t\\t\\t"description": "Brief parametre description."\\n\\t\\t}\\n\\t],\\n\\t"returns": [],\\n\\t"throws": [\\n\\t\\t{\\n\\t\\t\\t"type": "TypeError",\\n\\t\\t\\t"code": "ERR_INVALID_ARG_TYPE",\\n\\t\\t\\t"description": "Thrown if a given argument isn\\\'t of the correct type."\\n\\t\\t}\\n\\t],\\n\\t"asynchronous": false,\\n\\t"since": "v0.0.0",\\n\\t"post_re": [\\n\\t\\t{\\n\\t\\t\\t"search": ",\\\\\\\\)",\\n\\t\\t\\t"replace": " )",\\n\\t\\t\\t"flags": "gm"\\n\\t\\t}\\n\\t]\\n}\' },\n  [length]: 1 ] causes Inquirer.prompt to throw an error: "JSONError: Unexpected token s in JSON at position 668 while parsing near \'...ption": "Thrown if "source_buffer" isn\'t...\'"',
  [length]: 2 ]
2020-04-15T21:14:44.495Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ -4,
  'Error: inquirer_questions [ { type: \'editor\',\n    name: \'editor_input\',\n    message: \'Enter input context (JSON).\',\n    default: \'{\\n\\t"template": "js func",\\n\\t"name": "FunctionName",\\n\\t"description": "Brief description.",\\n\\t"params": [\\n\\t\\t{\\n\\t\\t\\t"type": "ArgumentType",\\n\\t\\t\\t"name": "parametre_name",\\n\\t\\t\\t"default": null,\\n\\t\\t\\t"description": "Brief parametre description."\\n\\t\\t}\\n\\t],\\n\\t"returns": [],\\n\\t"throws": [\\n\\t\\t{\\n\\t\\t\\t"type": "TypeError",\\n\\t\\t\\t"code": "ERR_INVALID_ARG_TYPE",\\n\\t\\t\\t"description": "Thrown if a given argument isn\\\'t of the correct type."\\n\\t\\t}\\n\\t],\\n\\t"asynchronous": false,\\n\\t"since": "v0.0.0",\\n\\t"post_re": [\\n\\t\\t{\\n\\t\\t\\t"search": ",\\\\\\\\)",\\n\\t\\t\\t"replace": " )",\\n\\t\\t\\t"flags": "gm"\\n\\t\\t}\\n\\t]\\n}\' },\n  [length]: 1 ] causes Inquirer.prompt to throw an error: "JSONError: Unexpected token s in JSON at position 668 while parsing near \'...ption": "Thrown if "source_buffer" isn\'t...\'"',
  [length]: 2 ]
2020-04-15T21:15:22.228Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T21:15:22.235Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:22.236Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T21:15:22.236Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T21:15:22.237Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T21:15:22.238Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-04-15T21:15:22.238Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:22.239Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:22.239Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:22.239Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open \'js/func.json\'',
  [length]: 2 ]
2020-04-15T21:15:22.239Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:22.240Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:15:22.240Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:15:22.240Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:15:22.252Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T21:15:56.859Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-15T21:15:56.860Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:56.861Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js func',
  name: 'DocumentationStringFromSourceBuffer',
  description: 'Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.',
  params: 
   [ { type: 'Buffer',
       name: 'source_buffer',
       default: null,
       description: 'The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings.' },
     { type: '?Object',
       name: 'options',
       default: '{}',
       descriptions: 'Additional run-time options.' },
     [length]: 2 ],
  returns: [ [length]: 0 ],
  throws: 
   [ { type: 'TypeError',
       code: 'ERR_INVALID_ARG_TYPE',
       description: 'Thrown if `source_buffer` isn\'t a Buffer.' },
     [length]: 1 ],
  asynchronous: false,
  since: 'v0.0.1',
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ] } undefined
2020-04-15T21:15:56.862Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:56.862Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:56.863Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:56.863Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/func.hbs\'',
  [length]: 2 ]
2020-04-15T21:15:56.863Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:15:56.864Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:15:56.865Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:15:56.865Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:15:56.872Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:error: [ -4,
  'Error: inquirer_questions [ { type: \'editor\',\n    name: \'editor_input\',\n    message: \'Enter input context (JSON).\',\n    default: \'{\\n\\t"template": "js func",\\n\\t"name": "FunctionName",\\n\\t"description": "Brief description.",\\n\\t"params": [\\n\\t\\t{\\n\\t\\t\\t"type": "ArgumentType",\\n\\t\\t\\t"name": "parametre_name",\\n\\t\\t\\t"default": null,\\n\\t\\t\\t"description": "Brief parametre description."\\n\\t\\t}\\n\\t],\\n\\t"returns": [],\\n\\t"throws": [\\n\\t\\t{\\n\\t\\t\\t"type": "TypeError",\\n\\t\\t\\t"code": "ERR_INVALID_ARG_TYPE",\\n\\t\\t\\t"description": "Thrown if a given argument isn\\\'t of the correct type."\\n\\t\\t}\\n\\t],\\n\\t"asynchronous": false,\\n\\t"since": "v0.0.0",\\n\\t"post_re": [\\n\\t\\t{\\n\\t\\t\\t"search": ",\\\\\\\\)",\\n\\t\\t\\t"replace": " )",\\n\\t\\t\\t"flags": "gm"\\n\\t\\t}\\n\\t]\\n}\' },\n  [length]: 1 ] causes Inquirer.prompt to throw an error: "Error: Parse error on line 30:\n... _return;{{/returns}}}/*** @function\n----------------------^\nExpecting \'CLOSE\', got \'CLOSE_UNESCAPED\'"',
  [length]: 2 ]
2020-04-15T21:15:56.873Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ -4,
  'Error: inquirer_questions [ { type: \'editor\',\n    name: \'editor_input\',\n    message: \'Enter input context (JSON).\',\n    default: \'{\\n\\t"template": "js func",\\n\\t"name": "FunctionName",\\n\\t"description": "Brief description.",\\n\\t"params": [\\n\\t\\t{\\n\\t\\t\\t"type": "ArgumentType",\\n\\t\\t\\t"name": "parametre_name",\\n\\t\\t\\t"default": null,\\n\\t\\t\\t"description": "Brief parametre description."\\n\\t\\t}\\n\\t],\\n\\t"returns": [],\\n\\t"throws": [\\n\\t\\t{\\n\\t\\t\\t"type": "TypeError",\\n\\t\\t\\t"code": "ERR_INVALID_ARG_TYPE",\\n\\t\\t\\t"description": "Thrown if a given argument isn\\\'t of the correct type."\\n\\t\\t}\\n\\t],\\n\\t"asynchronous": false,\\n\\t"since": "v0.0.0",\\n\\t"post_re": [\\n\\t\\t{\\n\\t\\t\\t"search": ",\\\\\\\\)",\\n\\t\\t\\t"replace": " )",\\n\\t\\t\\t"flags": "gm"\\n\\t\\t}\\n\\t]\\n}\' },\n  [length]: 1 ] causes Inquirer.prompt to throw an error: "Error: Parse error on line 30:\n... _return;{{/returns}}}/*** @function\n----------------------^\nExpecting \'CLOSE\', got \'CLOSE_UNESCAPED\'"',
  [length]: 2 ]
2020-04-15T21:18:51.640Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T21:18:51.646Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:18:51.647Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T21:18:51.647Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T21:18:51.649Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T21:18:51.649Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-04-15T21:18:51.649Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:18:51.650Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:18:51.650Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:18:51.651Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open \'js/func.json\'',
  [length]: 2 ]
2020-04-15T21:18:51.651Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:18:51.651Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:18:51.651Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:18:51.652Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:18:51.664Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T21:19:11.265Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-15T21:19:11.266Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.267Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js func',
  name: 'DocumentationStringFromSourceBuffer',
  description: 'Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.',
  params: 
   [ { type: 'Buffer',
       name: 'source_buffer',
       default: null,
       description: 'The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings.' },
     { type: '?Object',
       name: 'options',
       default: '{}',
       descriptions: 'Additional run-time options.' },
     [length]: 2 ],
  returns: [ [length]: 0 ],
  throws: 
   [ { type: 'TypeError',
       code: 'ERR_INVALID_ARG_TYPE',
       description: 'Thrown if `source_buffer` isn\'t a Buffer.' },
     [length]: 1 ],
  asynchronous: false,
  since: 'v0.0.1',
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ] } undefined
2020-04-15T21:19:11.267Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.267Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.267Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.268Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/func.hbs\'',
  [length]: 2 ]
2020-04-15T21:19:11.268Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.268Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:19:11.269Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:19:11.269Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:19:11.298Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options = ,){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.298Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:19:11.299Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [ 0,
    '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-15T21:19:11.299Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:19:11.299Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `/** ... */` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `/** ... */` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\t\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:19:11.306Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-15T21:19:11.306Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-15T21:27:39.700Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T21:27:39.707Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:39.708Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T21:27:39.708Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T21:27:39.709Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T21:27:39.710Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-04-15T21:27:39.710Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:39.710Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:39.711Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:39.711Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open \'js/func.json\'',
  [length]: 2 ]
2020-04-15T21:27:39.711Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:39.712Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:27:39.712Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:27:39.712Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:27:39.725Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T21:27:59.371Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `\\\\/** ... *\\\\/` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `\\\\/** ... *\\\\/` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [\n\t\t{ "type": "string", "description": "A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together." }\n\t\t],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-15T21:27:59.372Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js func",\n\t"name": "DocumentationStringFromSourceBuffer",\n\t"description": "Returns a string containing only the contents of `\\\\/** ... *\\\\/` style documentation strings from the given source-file buffer.",\n\t"params": [\n\t\t{\n\t\t\t"type": "Buffer",\n\t\t\t"name": "source_buffer",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a Node Buffer, to parse for `\\\\/** ... *\\\\/` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [\n\t\t{ "type": "string", "description": "A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together." }\n\t\t],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_buffer` isn\'t a Buffer."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.372Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js func',
  name: 'DocumentationStringFromSourceBuffer',
  description: 'Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.',
  params: 
   [ { type: 'Buffer',
       name: 'source_buffer',
       default: null,
       description: 'The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings.' },
     { type: '?Object',
       name: 'options',
       default: '{}',
       descriptions: 'Additional run-time options.' },
     [length]: 2 ],
  returns: 
   [ { type: 'string',
       description: 'A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.' },
     [length]: 1 ],
  throws: 
   [ { type: 'TypeError',
       code: 'ERR_INVALID_ARG_TYPE',
       description: 'Thrown if `source_buffer` isn\'t a Buffer.' },
     [length]: 1 ],
  asynchronous: false,
  since: 'v0.0.1',
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ] } undefined
2020-04-15T21:27:59.373Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.373Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.373Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.374Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/func.hbs\'',
  [length]: 2 ]
2020-04-15T21:27:59.374Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.374Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:27:59.375Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:27:59.375Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:27:59.405Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options = ,){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.406Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:27:59.406Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [ 0,
    '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-15T21:27:59.406Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:27:59.407Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @function DocumentationStringFromSourceBuffer\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file buffer.\n* @param {Buffer} source_buffer - The source file, as a Node Buffer, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_buffer` isn\'t a Buffer.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer( source_buffer , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( Buffer.isBuffer(source_buffer) === false ){\n\t\treturn_error = new TypeError(\'Param "source_buffer" is not Buffer.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function DocumentationStringFromSourceBuffer_Test\n* @access private\n* @description Tests DocumentationStringFromSourceBuffer\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction DocumentationStringFromSourceBuffer_Test(){\n\tconst FUNCTION_NAME = \'DocumentationStringFromSourceBuffer_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:27:59.413Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-15T21:27:59.413Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-04-15T21:52:53.419Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-04-15T21:52:53.425Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: { '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:52:53.426Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [ 0,
  { template_directories: 
     [ 'Resources/templates',
       '/home/cameron/.local/share/function-factory-nodejs/templates',
       [length]: 2 ],
    defaults_directories: 
     [ 'Resources/defaults',
       '/home/cameron/.local/share/function-factory-nodejs/defaults',
       [length]: 2 ] },
  [length]: 2 ]
2020-04-15T21:52:53.426Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-04-15T21:52:53.428Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-04-15T21:52:53.428Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-04-15T21:52:53.429Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:52:53.429Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:52:53.429Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:52:53.430Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ -4,
  'JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open \'js/func.json\'',
  [length]: 2 ]
2020-04-15T21:52:53.430Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: { '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:52:53.430Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:52:53.431Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:52:53.431Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [ 0,
  '{\n\t"template": "js func",\n\t"name": "FunctionName",\n\t"description": "Brief description.",\n\t"params": [\n\t\t{\n\t\t\t"type": "ArgumentType",\n\t\t\t"name": "parametre_name",\n\t\t\t"default": null,\n\t\t\t"description": "Brief parametre description."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": {\n\t\t\t\t"value": "{}"\n\t\t\t},\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\t],\n\t"returns": [],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if a given argument isn\'t of the correct type."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.0",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}',
  [length]: 2 ]
2020-04-15T21:52:53.443Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-04-15T21:56:57.494Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: { editor_input: '{\n\t"template": "js func",\n\t"name": "getDocumentationStringFromSourceString",\n\t"description": "Returns a string containing only the contents of `\\\\/** ... *\\\\/` style documentation strings from the given source-file string.",\n\t"params": [\n\t\t{\n\t\t\t"type": "string",\n\t\t\t"name": "source_string",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a string, to parse for `\\\\/** ... *\\\\/` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [\n\t\t{ "type": "string", "description": "A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together." }\n\t\t],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_string` isn\'t a string."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' }
2020-04-15T21:56:57.495Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: { '0': 
   { editor_input: '{\n\t"template": "js func",\n\t"name": "getDocumentationStringFromSourceString",\n\t"description": "Returns a string containing only the contents of `\\\\/** ... *\\\\/` style documentation strings from the given source-file string.",\n\t"params": [\n\t\t{\n\t\t\t"type": "string",\n\t\t\t"name": "source_string",\n\t\t\t"default": null,\n\t\t\t"description": "The source file, as a string, to parse for `\\\\/** ... *\\\\/` style documentation strings."\n\t\t},\n\t\t{\n\t\t\t"type": "?Object",\n\t\t\t"name": "options",\n\t\t\t"default": "{}",\n\t\t\t"descriptions": "Additional run-time options."\n\t\t}\n\n\t],\n\t"returns": [\n\t\t{ "type": "string", "description": "A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together." }\n\t\t],\n\t"throws": [\n\t\t{\n\t\t\t"type": "TypeError",\n\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n\t\t\t"description": "Thrown if `source_string` isn\'t a string."\n\t\t}\n\t],\n\t"asynchronous": false,\n\t"since": "v0.0.1",\n\t"post_re": [\n\t\t{\n\t\t\t"search": ",\\\\)",\n\t\t\t"replace": " )",\n\t\t\t"flags": "gm"\n\t\t}\n\t]\n}\n' },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.495Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: { template: 'js func',
  name: 'getDocumentationStringFromSourceString',
  description: 'Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.',
  params: 
   [ { type: 'string',
       name: 'source_string',
       default: null,
       description: 'The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings.' },
     { type: '?Object',
       name: 'options',
       default: '{}',
       descriptions: 'Additional run-time options.' },
     [length]: 2 ],
  returns: 
   [ { type: 'string',
       description: 'A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.' },
     [length]: 1 ],
  throws: 
   [ { type: 'TypeError',
       code: 'ERR_INVALID_ARG_TYPE',
       description: 'Thrown if `source_string` isn\'t a string.' },
     [length]: 1 ],
  asynchronous: false,
  since: 'v0.0.1',
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ] } undefined
2020-04-15T21:56:57.496Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: { '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.496Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.496Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.497Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ -3,
  'Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access \'js/func.hbs\'',
  [length]: 2 ]
2020-04-15T21:56:57.497Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: { '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.498Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:56:57.498Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:56:57.498Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [ 0,
  { [Function: ret]
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular] },
    _setup: 
     { [Function]
       [length]: 1,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } },
    _child: 
     { [Function]
       [length]: 4,
       [name]: '',
       [prototype]: { [constructor]: [Circular] } } },
  [length]: 2 ]
2020-04-15T21:56:57.528Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: { '0': '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options = ,){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.529Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [ 0,
  '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:56:57.529Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [ 0,
  '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [ 0,
    '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
    [length]: 2 ],
  [length]: 3 ]
2020-04-15T21:56:57.529Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [ 0,
  '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  [length]: 2 ]
2020-04-15T21:56:57.530Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: { '0': '/**\n* @function getDocumentationStringFromSourceString\n* @access public\n* @description Returns a string containing only the contents of `\\/** ... *\\/` style documentation strings from the given source-file string.\n* @param {string} source_string - The source file, as a string, to parse for `\\/** ... *\\/` style documentation strings. \n* @param {?Object} options -  [default: ]\n* @returns {string} A string containing all of the documentation style comments, with the comment markers themselves remove, concatenated together.\n* @throws {TypeError} `ERR_INVALID_ARG_TYPE` Thrown if `source_string` isn\'t a string.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString( source_string , options =  ){\n\tvar _return;\n\tvar return_error;\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString\';\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `received: ${arguments}`});\n\t//Variables\n\t//Parametre checks\n\tif( typeof(source_string) !== \'string\' ){\n\t\treturn_error = new TypeError(\'Param "source_string" is not string.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\tif( typeof(options) !== \'object\' ){\n\t\treturn_error = new TypeError(\'Param "options" is not ?Object.\');\n\t\treturn_error.code = ERR_INVALID_ARG_TYPE;\n\t\tthrow return_error;\n\t}\n\t//Function\n\n\t//Return\n\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: \'debug\', message: `returned: ${_return}`});\n\treturn _return;\n}\n\n/**\n* @function getDocumentationStringFromSourceString_Test\n* @access private\n* @description Tests getDocumentationStringFromSourceString\n* @returns {boolean} `true` if all test pass successfully.\n* @throws {Error} If a test fails.\n* @since v0.0.1\n*/\nfunction getDocumentationStringFromSourceString_Test(){\n\tconst FUNCTION_NAME = \'getDocumentationStringFromSourceString_Test\';\n\t//Variables\n\t//Tests\n\t//Return\n\treturn true;\n}\n',
  '1': { verbose: true, pasteboard: true, edit: 'js func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: { [Function: values] [length]: 0, [name]: 'values' } }
2020-04-15T21:56:57.538Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-04-15T21:56:57.538Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
