2020-05-19T22:14:17.007Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-05-19T22:14:17.013Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: [Arguments] {
  '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:14:17.014Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [
  0,
  {
    template_directories: [
      'Resources/templates',
      '/home/cameron/.local/share/function-factory-nodejs/templates',
      [length]: 2
    ],
    defaults_directories: [
      'Resources/defaults',
      '/home/cameron/.local/share/function-factory-nodejs/defaults',
      [length]: 2
    ]
  },
  [length]: 2
]
2020-05-19T22:14:17.014Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-05-19T22:14:17.015Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-05-19T22:14:17.016Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-05-19T22:14:17.016Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: [Arguments] {
  '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:14:17.016Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: [Arguments] {
  '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:14:17.017Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: [Arguments] {
  '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:14:17.018Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [
  -4,
  `JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open 'js/func.json'\n` +
    '    at Object.openSync (fs.js:462:3)\n' +
    '    at Object.readFileSync (fs.js:364:35)\n' +
    '    at Object.JSONIC_Parse_FilePath [as ParseFilePath] (/home/cameron/dev/function-factory/source/jsonic-parse.js:146:27)\n' +
    '    at DefaultInputDataFromPath (/home/cameron/dev/function-factory/source/main.js:156:33)\n' +
    '    at DefaultInputDataFromNameLiteral (/home/cameron/dev/function-factory/source/main.js:179:21)\n' +
    '    at DefaultInputDataFromGenericName (/home/cameron/dev/function-factory/source/main.js:219:21)\n' +
    '    at Input_Inquirer_Editor (/home/cameron/dev/function-factory/source/main.js:469:21)\n' +
    '    at Object.<anonymous> (/home/cameron/dev/function-factory/source/main.js:690:14)\n' +
    '    at Module._compile (internal/modules/cjs/loader.js:1118:30)\n' +
    '    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1138:10) {\n' +
    '  errno: -2,\n' +
    "  syscall: 'open',\n" +
    "  code: 'ENOENT',\n" +
    "  path: 'js/func.json'\n" +
    '}',
  [length]: 2
]
2020-05-19T22:14:17.019Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: [Arguments] {
  '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:14:17.019Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:14:17.020Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:14:17.020Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:14:17.031Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-05-19T22:16:30.739Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: {
  editor_input: '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "getTemplateFunctionFromNameLiteral",\n' +
    '\t"description": "Returns the template function from the given name literal string or `null` if none are found.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "string",\n' +
    '\t\t\t\t"name": "name_literal_string",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "The name literal as a string."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "?Function",\n' +
    '\t\t"description": "The found template function or `null` otherwise."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": false,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}\n'
}
2020-05-19T22:16:30.739Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: [Arguments] {
  '0': {
    editor_input: '{\n' +
      '\t"template": "js func",\n' +
      '\t"name": "getTemplateFunctionFromNameLiteral",\n' +
      '\t"description": "Returns the template function from the given name literal string or `null` if none are found.",\n' +
      '\t"parametres": {\n' +
      '\t\t"params": [\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "string",\n' +
      '\t\t\t\t"name": "name_literal_string",\n' +
      '\t\t\t\t"default": null,\n' +
      '\t\t\t\t"description": "The name literal as a string."\n' +
      '\t\t\t},\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "?Object",\n' +
      '\t\t\t\t"name": "options",\n' +
      '\t\t\t\t"default": {\n' +
      '\t\t\t\t\t"value": "{}"\n' +
      '\t\t\t\t},\n' +
      '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
      '\t\t\t}\n' +
      '\t\t]\n' +
      '\t},\n' +
      '\t"return": {\n' +
      '\t\t"type": "?Function",\n' +
      '\t\t"description": "The found template function or `null` otherwise."\n' +
      '\t},\n' +
      '\t"throw": {\n' +
      '\t\t"throws": [\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "TypeError",\n' +
      '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
      `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
      '\t\t\t}\n' +
      '\t\t]\n' +
      '\t},\n' +
      '\t"asynchronous": false,\n' +
      '\t"unit_test": false,\n' +
      '\t"post_re": [\n' +
      '\t\t{\n' +
      '\t\t\t"search": ",\\\\)",\n' +
      '\t\t\t"replace": " )",\n' +
      '\t\t\t"flags": "gm"\n' +
      '\t\t}\n' +
      '\t]\n' +
      '}\n'
  },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.740Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: {
  template: 'js func',
  name: 'getTemplateFunctionFromNameLiteral',
  description: 'Returns the template function from the given name literal string or `null` if none are found.',
  parametres: {
    params: [
      {
        type: 'string',
        name: 'name_literal_string',
        default: null,
        description: 'The name literal as a string.'
      },
      {
        type: '?Object',
        name: 'options',
        default: { value: '{}' },
        description: '[Reserved] Additional run-time options.'
      },
      [length]: 2
    ]
  },
  return: {
    type: '?Function',
    description: 'The found template function or `null` otherwise.'
  },
  throw: {
    throws: [
      {
        type: 'TypeError',
        code: 'ERR_INVALID_ARG_TYPE',
        description: "Thrown if a given argument isn't of the correct type."
      },
      [length]: 1
    ]
  },
  asynchronous: false,
  unit_test: false,
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ]
} undefined
2020-05-19T22:16:30.741Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: [Arguments] {
  '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.741Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: [Arguments] {
  '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.741Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: [Arguments] {
  '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.742Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [
  -3,
  `Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access 'js/func.hbs'\n` +
    '    at Object.accessSync (fs.js:208:3)\n' +
    '    at TemplateFunctionFromPath (/home/cameron/dev/function-factory/source/main.js:239:15)\n' +
    '    at TemplateFunctionFromNameLiteral (/home/cameron/dev/function-factory/source/main.js:269:21)\n' +
    '    at TemplateFunctionFromGenericName (/home/cameron/dev/function-factory/source/main.js:308:21)\n' +
    '    at OutputFromInput (/home/cameron/dev/function-factory/source/main.js:364:23)\n' +
    '    at OutputFromInquirerEditorAnswer (/home/cameron/dev/function-factory/source/main.js:401:22)\n' +
    '    at Input_Inquirer_Editor (/home/cameron/dev/function-factory/source/main.js:486:22)\n' +
    '    at processTicksAndRejections (internal/process/task_queues.js:97:5) {\n' +
    '  errno: -2,\n' +
    "  syscall: 'access',\n" +
    "  code: 'ENOENT',\n" +
    "  path: 'js/func.hbs'\n" +
    '}',
  [length]: 2
]
2020-05-19T22:16:30.742Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: [Arguments] {
  '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.743Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-19T22:16:30.743Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-19T22:16:30.744Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-19T22:16:30.780Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: [Arguments] {
  '0': '/**\n' +
    '### getTemplateFunctionFromNameLiteral (private)\n' +
    '> Returns the template function from the given name literal string or `null` if none are found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| name_literal_string | {string} | The name literal as a string.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    '| {?Function} | The found template function or `null` otherwise. |\n' +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {},){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(name_literal_string) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  '1': [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.780Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromNameLiteral (private)\n' +
    '> Returns the template function from the given name literal string or `null` if none are found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| name_literal_string | {string} | The name literal as a string.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    '| {?Function} | The found template function or `null` otherwise. |\n' +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(name_literal_string) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [length]: 2
]
2020-05-19T22:16:30.781Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromNameLiteral (private)\n' +
    '> Returns the template function from the given name literal string or `null` if none are found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| name_literal_string | {string} | The name literal as a string.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    '| {?Function} | The found template function or `null` otherwise. |\n' +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(name_literal_string) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [
    0,
    '/**\n' +
      '### getTemplateFunctionFromNameLiteral (private)\n' +
      '> Returns the template function from the given name literal string or `null` if none are found.\n' +
      '\n' +
      'Parametres:\n' +
      '| name | type | description |\n' +
      '| --- | --- | --- |\n' +
      '| name_literal_string | {string} | The name literal as a string.  |\n' +
      '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
      '\n' +
      'Returns:\n' +
      '| type | description |\n' +
      '| --- | --- |\n' +
      '| {?Function} | The found template function or `null` otherwise. |\n' +
      '\n' +
      'Throws:\n' +
      '| code | type | condition |\n' +
      '| --- | --- | --- |\n' +
      "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
      '\n' +
      'Status:\n' +
      '| version | change |\n' +
      '| --- | --- |\n' +
      '| 0.0.1 | Introduced |\n' +
      '*/\n' +
      '/* istanbul ignore next */\n' +
      'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {} ){\n' +
      '\tvar arguments_array = Array.from(arguments);\n' +
      '\tvar _return;\n' +
      '\tvar return_error;\n' +
      "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
      "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
      '\t//Variables\n' +
      '\t//Parametre checks\n' +
      "\tif( typeof(name_literal_string) !== 'string' ){\n" +
      `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
      "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
      '\t\tthrow return_error;\n' +
      '\t}\n' +
      "\tif( typeof(options) !== 'object' ){\n" +
      `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
      "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
      '\t\tthrow return_error;\n' +
      '\t}\n' +
      '\n' +
      '\t//Function\n' +
      '\n' +
      '\t//Return\n' +
      "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
      '\treturn _return;\n' +
      '}\n' +
      '\n' +
      '\n',
    [length]: 2
  ],
  [length]: 3
]
2020-05-19T22:16:30.782Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromNameLiteral (private)\n' +
    '> Returns the template function from the given name literal string or `null` if none are found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| name_literal_string | {string} | The name literal as a string.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    '| {?Function} | The found template function or `null` otherwise. |\n' +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(name_literal_string) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [length]: 2
]
2020-05-19T22:16:30.783Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: [Arguments] {
  '0': '/**\n' +
    '### getTemplateFunctionFromNameLiteral (private)\n' +
    '> Returns the template function from the given name literal string or `null` if none are found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| name_literal_string | {string} | The name literal as a string.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    '| {?Function} | The found template function or `null` otherwise. |\n' +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromNameLiteral( name_literal_string, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromNameLiteral';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(name_literal_string) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "name_literal_string" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  '1': { verbose: true, pasteboard: true, edit: 'js func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:16:30.791Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-05-19T22:16:30.791Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
2020-05-19T22:37:21.714Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: Start of execution block.
2020-05-19T22:37:21.719Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load received: [Arguments] {
  '0': '/home/cameron/.config/function-factory-nodejs/config.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:37:21.720Z function-factory:FunctionFactory:function-factory.js:ConfigObject_Load:debug: ConfigObject_Load returned: [
  0,
  {
    template_directories: [
      'Resources/templates',
      '/home/cameron/.local/share/function-factory-nodejs/templates',
      [length]: 2
    ],
    defaults_directories: [
      'Resources/defaults',
      '/home/cameron/.local/share/function-factory-nodejs/defaults',
      [length]: 2
    ]
  },
  [length]: 2
]
2020-05-19T22:37:21.720Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:note: Logger: console_stderr transport log level is now: debug
2020-05-19T22:37:21.721Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:info: In editor mode.
2020-05-19T22:37:21.722Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor received: { verbose: true, pasteboard: true, edit: 'js func' }
2020-05-19T22:37:21.722Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: received: [Arguments] {
  '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:37:21.722Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: received: [Arguments] {
  '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:37:21.723Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: [Arguments] {
  '0': 'js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:37:21.724Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [
  -4,
  `JSONICParse.ParseFilePath: Error: reading file "js/func.json": Error: ENOENT: no such file or directory, open 'js/func.json'\n` +
    '    at Object.openSync (fs.js:462:3)\n' +
    '    at Object.readFileSync (fs.js:364:35)\n' +
    '    at Object.JSONIC_Parse_FilePath [as ParseFilePath] (/home/cameron/dev/function-factory/source/jsonic-parse.js:146:27)\n' +
    '    at DefaultInputDataFromPath (/home/cameron/dev/function-factory/source/main.js:156:33)\n' +
    '    at DefaultInputDataFromNameLiteral (/home/cameron/dev/function-factory/source/main.js:179:21)\n' +
    '    at DefaultInputDataFromGenericName (/home/cameron/dev/function-factory/source/main.js:219:21)\n' +
    '    at Input_Inquirer_Editor (/home/cameron/dev/function-factory/source/main.js:469:21)\n' +
    '    at Object.<anonymous> (/home/cameron/dev/function-factory/source/main.js:690:14)\n' +
    '    at Module._compile (internal/modules/cjs/loader.js:1118:30)\n' +
    '    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1138:10) {\n' +
    '  errno: -2,\n' +
    "  syscall: 'open',\n" +
    "  code: 'ENOENT',\n" +
    "  path: 'js/func.json'\n" +
    '}',
  [length]: 2
]
2020-05-19T22:37:21.725Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: received: [Arguments] {
  '0': 'Resources/defaults/js/func.json',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-19T22:37:21.725Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromPath:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:37:21.726Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromNameLiteral:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:37:21.726Z function-factory:FunctionFactory:function-factory.js:DefaultInputDataFromGenericName:debug: returned: [
  0,
  '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "FunctionName",\n' +
    '\t"description": "Brief description.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "ArgumentType",\n' +
    '\t\t\t\t"name": "parametre_name",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "Brief parametre description."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "ReturnType",\n' +
    '\t\t"description": "Return value description."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": true,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}',
  [length]: 2
]
2020-05-19T22:37:21.740Z function-factory:FunctionFactory:function-factory.js:MainExecutionFunction:debug: End of execution block.
2020-05-20T02:33:18.776Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: inquirer_answer: {
  editor_input: '{\n' +
    '\t"template": "js func",\n' +
    '\t"name": "getTemplateFunctionFromFilePath",\n' +
    '\t"description": "Returns the template function from the given file path or `null` if not found.",\n' +
    '\t"parametres": {\n' +
    '\t\t"params": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "string",\n' +
    '\t\t\t\t"name": "file_path",\n' +
    '\t\t\t\t"default": null,\n' +
    '\t\t\t\t"description": "The file path of the [HandleBars](https://handlebarsjs.com/) template to load."\n' +
    '\t\t\t},\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "?Object",\n' +
    '\t\t\t\t"name": "options",\n' +
    '\t\t\t\t"default": {\n' +
    '\t\t\t\t\t"value": "{}"\n' +
    '\t\t\t\t},\n' +
    '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"return": {\n' +
    '\t\t"type": "?Function",\n' +
    '\t\t"description": "The template function or `null` if it can\'t be found."\n' +
    '\t},\n' +
    '\t"throw": {\n' +
    '\t\t"throws": [\n' +
    '\t\t\t{\n' +
    '\t\t\t\t"type": "TypeError",\n' +
    '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
    `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
    '\t\t\t}\n' +
    '\t\t]\n' +
    '\t},\n' +
    '\t"asynchronous": false,\n' +
    '\t"unit_test": false,\n' +
    '\t"post_re": [\n' +
    '\t\t{\n' +
    '\t\t\t"search": ",\\\\)",\n' +
    '\t\t\t"replace": " )",\n' +
    '\t\t\t"flags": "gm"\n' +
    '\t\t}\n' +
    '\t]\n' +
    '}\n'
}
2020-05-20T02:33:18.776Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer received: [Arguments] {
  '0': {
    editor_input: '{\n' +
      '\t"template": "js func",\n' +
      '\t"name": "getTemplateFunctionFromFilePath",\n' +
      '\t"description": "Returns the template function from the given file path or `null` if not found.",\n' +
      '\t"parametres": {\n' +
      '\t\t"params": [\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "string",\n' +
      '\t\t\t\t"name": "file_path",\n' +
      '\t\t\t\t"default": null,\n' +
      '\t\t\t\t"description": "The file path of the [HandleBars](https://handlebarsjs.com/) template to load."\n' +
      '\t\t\t},\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "?Object",\n' +
      '\t\t\t\t"name": "options",\n' +
      '\t\t\t\t"default": {\n' +
      '\t\t\t\t\t"value": "{}"\n' +
      '\t\t\t\t},\n' +
      '\t\t\t\t"description": "[Reserved] Additional run-time options."\n' +
      '\t\t\t}\n' +
      '\t\t]\n' +
      '\t},\n' +
      '\t"return": {\n' +
      '\t\t"type": "?Function",\n' +
      '\t\t"description": "The template function or `null` if it can\'t be found."\n' +
      '\t},\n' +
      '\t"throw": {\n' +
      '\t\t"throws": [\n' +
      '\t\t\t{\n' +
      '\t\t\t\t"type": "TypeError",\n' +
      '\t\t\t\t"code": "ERR_INVALID_ARG_TYPE",\n' +
      `\t\t\t\t"description": "Thrown if a given argument isn't of the correct type."\n` +
      '\t\t\t}\n' +
      '\t\t]\n' +
      '\t},\n' +
      '\t"asynchronous": false,\n' +
      '\t"unit_test": false,\n' +
      '\t"post_re": [\n' +
      '\t\t{\n' +
      '\t\t\t"search": ",\\\\)",\n' +
      '\t\t\t"replace": " )",\n' +
      '\t\t\t"flags": "gm"\n' +
      '\t\t}\n' +
      '\t]\n' +
      '}\n'
  },
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.777Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OuputputFromInput received: {
  template: 'js func',
  name: 'getTemplateFunctionFromFilePath',
  description: 'Returns the template function from the given file path or `null` if not found.',
  parametres: {
    params: [
      {
        type: 'string',
        name: 'file_path',
        default: null,
        description: 'The file path of the [HandleBars](https://handlebarsjs.com/) template to load.'
      },
      {
        type: '?Object',
        name: 'options',
        default: { value: '{}' },
        description: '[Reserved] Additional run-time options.'
      },
      [length]: 2
    ]
  },
  return: {
    type: '?Function',
    description: "The template function or `null` if it can't be found."
  },
  throw: {
    throws: [
      {
        type: 'TypeError',
        code: 'ERR_INVALID_ARG_TYPE',
        description: "Thrown if a given argument isn't of the correct type."
      },
      [length]: 1
    ]
  },
  asynchronous: false,
  unit_test: false,
  post_re: [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ]
} undefined
2020-05-20T02:33:18.778Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: received: [Arguments] {
  '0': 'js func',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.778Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: received: [Arguments] {
  '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.778Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: [Arguments] {
  '0': 'js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.779Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [
  -3,
  `Error: template "js/func.hbs" cannot be read: Error: ENOENT: no such file or directory, access 'js/func.hbs'\n` +
    '    at Object.accessSync (fs.js:208:3)\n' +
    '    at TemplateFunctionFromPath (/home/cameron/dev/function-factory/source/main.js:239:15)\n' +
    '    at TemplateFunctionFromNameLiteral (/home/cameron/dev/function-factory/source/main.js:269:21)\n' +
    '    at TemplateFunctionFromGenericName (/home/cameron/dev/function-factory/source/main.js:308:21)\n' +
    '    at OutputFromInput (/home/cameron/dev/function-factory/source/main.js:364:23)\n' +
    '    at OutputFromInquirerEditorAnswer (/home/cameron/dev/function-factory/source/main.js:401:22)\n' +
    '    at Input_Inquirer_Editor (/home/cameron/dev/function-factory/source/main.js:486:22)\n' +
    '    at processTicksAndRejections (internal/process/task_queues.js:97:5) {\n' +
    '  errno: -2,\n' +
    "  syscall: 'access',\n" +
    "  code: 'ENOENT',\n" +
    "  path: 'js/func.hbs'\n" +
    '}',
  [length]: 2
]
2020-05-20T02:33:18.779Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: received: [Arguments] {
  '0': 'Resources/templates/js/func.hbs',
  [length]: 1,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromPath:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-20T02:33:18.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromNameLiteral:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-20T02:33:18.780Z function-factory:FunctionFactory:function-factory.js:TemplateFunctionFromGenericName:debug: returned: [
  0,
  <ref *1> [Function: ret] {
    [length]: 2,
    [name]: 'ret',
    [prototype]: ret { [constructor]: [Circular *1] },
    _setup: <ref *2> [Function (anonymous)] {
      [length]: 1,
      [name]: '',
      [prototype]: { [constructor]: [Circular *2] }
    },
    _child: <ref *3> [Function (anonymous)] {
      [length]: 4,
      [name]: '',
      [prototype]: { [constructor]: [Circular *3] }
    }
  },
  [length]: 2
]
2020-05-20T02:33:18.816Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: received: [Arguments] {
  '0': '/**\n' +
    '### getTemplateFunctionFromFilePath (private)\n' +
    '> Returns the template function from the given file path or `null` if not found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    "| {?Function} | The template function or `null` if it can't be found. |\n" +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromFilePath( file_path, options = {},){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(file_path) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  '1': [ { search: ',\\)', replace: ' )', flags: 'gm' }, [length]: 1 ],
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.816Z function-factory:FunctionFactory:function-factory.js:OutputApplyPostRE:debug: returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromFilePath (private)\n' +
    '> Returns the template function from the given file path or `null` if not found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    "| {?Function} | The template function or `null` if it can't be found. |\n" +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromFilePath( file_path, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(file_path) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [length]: 2
]
2020-05-20T02:33:18.817Z function-factory:FunctionFactory:function-factory.js:OutputFromInput:debug: OutputFromInput returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromFilePath (private)\n' +
    '> Returns the template function from the given file path or `null` if not found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    "| {?Function} | The template function or `null` if it can't be found. |\n" +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromFilePath( file_path, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(file_path) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [
    0,
    '/**\n' +
      '### getTemplateFunctionFromFilePath (private)\n' +
      '> Returns the template function from the given file path or `null` if not found.\n' +
      '\n' +
      'Parametres:\n' +
      '| name | type | description |\n' +
      '| --- | --- | --- |\n' +
      '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
      '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
      '\n' +
      'Returns:\n' +
      '| type | description |\n' +
      '| --- | --- |\n' +
      "| {?Function} | The template function or `null` if it can't be found. |\n" +
      '\n' +
      'Throws:\n' +
      '| code | type | condition |\n' +
      '| --- | --- | --- |\n' +
      "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
      '\n' +
      'Status:\n' +
      '| version | change |\n' +
      '| --- | --- |\n' +
      '| 0.0.1 | Introduced |\n' +
      '*/\n' +
      '/* istanbul ignore next */\n' +
      'function getTemplateFunctionFromFilePath( file_path, options = {} ){\n' +
      '\tvar arguments_array = Array.from(arguments);\n' +
      '\tvar _return;\n' +
      '\tvar return_error;\n' +
      "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
      "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
      '\t//Variables\n' +
      '\t//Parametre checks\n' +
      "\tif( typeof(file_path) !== 'string' ){\n" +
      `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
      "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
      '\t\tthrow return_error;\n' +
      '\t}\n' +
      "\tif( typeof(options) !== 'object' ){\n" +
      `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
      "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
      '\t\tthrow return_error;\n' +
      '\t}\n' +
      '\n' +
      '\t//Function\n' +
      '\n' +
      '\t//Return\n' +
      "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
      '\treturn _return;\n' +
      '}\n' +
      '\n' +
      '\n',
    [length]: 2
  ],
  [length]: 3
]
2020-05-20T02:33:18.818Z function-factory:FunctionFactory:function-factory.js:OutputFromInquirerEditorAnswer:debug: OutputFromInquirerEditorAnswer returned: [
  0,
  '/**\n' +
    '### getTemplateFunctionFromFilePath (private)\n' +
    '> Returns the template function from the given file path or `null` if not found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    "| {?Function} | The template function or `null` if it can't be found. |\n" +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromFilePath( file_path, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(file_path) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  [length]: 2
]
2020-05-20T02:33:18.819Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: received: [Arguments] {
  '0': '/**\n' +
    '### getTemplateFunctionFromFilePath (private)\n' +
    '> Returns the template function from the given file path or `null` if not found.\n' +
    '\n' +
    'Parametres:\n' +
    '| name | type | description |\n' +
    '| --- | --- | --- |\n' +
    '| file_path | {string} | The file path of the [HandleBars](https://handlebarsjs.com/) template to load.  |\n' +
    '| options | {?Object} | [Reserved] Additional run-time options. \\[default: {}\\] |\n' +
    '\n' +
    'Returns:\n' +
    '| type | description |\n' +
    '| --- | --- |\n' +
    "| {?Function} | The template function or `null` if it can't be found. |\n" +
    '\n' +
    'Throws:\n' +
    '| code | type | condition |\n' +
    '| --- | --- | --- |\n' +
    "| 'ERR_INVALID_ARG_TYPE' | {TypeError} | Thrown if a given argument isn't of the correct type. |\n" +
    '\n' +
    'Status:\n' +
    '| version | change |\n' +
    '| --- | --- |\n' +
    '| 0.0.1 | Introduced |\n' +
    '*/\n' +
    '/* istanbul ignore next */\n' +
    'function getTemplateFunctionFromFilePath( file_path, options = {} ){\n' +
    '\tvar arguments_array = Array.from(arguments);\n' +
    '\tvar _return;\n' +
    '\tvar return_error;\n' +
    "\tconst FUNCTION_NAME = 'getTemplateFunctionFromFilePath';\n" +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});\n" +
    '\t//Variables\n' +
    '\t//Parametre checks\n' +
    "\tif( typeof(file_path) !== 'string' ){\n" +
    `\t\treturn_error = new TypeError('Param "file_path" is not string.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    "\tif( typeof(options) !== 'object' ){\n" +
    `\t\treturn_error = new TypeError('Param "options" is not ?Object.');\n` +
    "\t\treturn_error.code = 'ERR_INVALID_ARG_TYPE';\n" +
    '\t\tthrow return_error;\n' +
    '\t}\n' +
    '\n' +
    '\t//Function\n' +
    '\n' +
    '\t//Return\n' +
    "\tLogger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});\n" +
    '\treturn _return;\n' +
    '}\n' +
    '\n' +
    '\n',
  '1': { verbose: true, pasteboard: true, edit: 'js func' },
  [length]: 2,
  [callee]: [Getter/Setter],
  [Symbol(Symbol.iterator)]: [Function: values] { [length]: 0, [name]: 'values' }
}
2020-05-20T02:33:18.833Z function-factory:FunctionFactory:function-factory.js:ProduceOutput:debug: returned: [ 0, null, [length]: 2 ]
2020-05-20T02:33:18.834Z function-factory:FunctionFactory:function-factory.js:Input_Inquirer_Editor:debug: Input_Inquirer_Editor returned: [ 0, null, [length]: 2 ]
