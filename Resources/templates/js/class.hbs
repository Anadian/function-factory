{{! js/class.hbs}}
/**
* @class {{name}}
* @brief {{& description}}
{{#extends}}* @extends {{/extends}}
{{/extends}}{{#constructor_params}}* @param {{name}}
*	@type {{type}}
*	@brief {{& description}}
*	@default {{& default}}
{{/constructor_params}}{{#methods}}* @fn {{name}}
*	@brief {{& description}}
{{#asynchronous}}* @async true
{{/asynchronous}}{{#params}}* @param {{name}}
*	@type {{type}}
*	@brief {{& description}}
*	@default {{& default}}
{{/params}}{{/methods}}
class {{name}} {
	constructor({{#constructor_params}} {{name}},{{/constructor_params}}){
		{{#extends}}super();
		{{/extends}}var _return = [1,null];
		const FUNCTION_NAME = '{{name}}.constructor';
		//Variables

		//Parametre checks
{{#constructor_params}}
		if({{name}} == undefined) {{name}} = {{& default}};
{{/constructor_params}}
		
		//Function

		//Return
		return _return;
	}
	{{#methods}}
	/** @fn {{name}}
	* @brief {{& description}}
	{{#asynchronous}}* @async true
	{{/asynchronous}}{{#static}}* @static true
	{{/static}}{{#params}}* @param {{name}}
	*	@type {{type}}
	*	@brief {{& description}}
	*	@default {{& default}}
	{{/params}}
	* @return <ARRAY>
	*	@entry 0 
	*		@retval 1 premature return.
	*		@retval 0 on success.
	*		@retval <0 on failure.
	*	@entry 1
	*		@retval <object> on success
	*		@retval <error_message> on failure.
	*/
	{{#asynchronous}}async {{/asynchronous}}{{#static}}static {{/static}}{{name}}({{#params}} {{name}},{{/params}}){
		var _return = [1,null];
		const FUNCTION_NAME = '{{name}}';
		//Variables

		//Log.log(PROCESS_NAME,MODULE_NAME,FILENAME,FUNCTION_NAME,'debug','received: '+arguments.toString());
		//Parametre checks
	{{#params}}
		if({{name}} == undefined) {{name}} = {{& default}};
	{{/params}}
		
		//Function

		//Return
		//Log.log(PROCESS_NAME,MODULE_NAME,FILENAME,FUNCTION_NAME,'debug','returned: '+_return.toString());
		return _return;
	}{{/methods}}
}
