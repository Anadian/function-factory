/**
* @fn {{name}}
* @brief {{& description}}
{{#asynchronous}}
* @async {{asynchronous}}
{{/asynchronous}}
{{#params}}
* @param {{name}}
*	@type {{#type}}{{$type}}{{/type}}{{^type}}{{high_type}}:{{low_type}}{{/type}}
*	@brief {{& description}}
*	@default {{& default}}
{{/params}}
* @return <ARRAY>
*	@entry 0 
*		@retval 1 premature return.
*		@retval 0 on success.
*		@retval <0 on failure.
*	@entry 1
*		@retval <object> on success
*		@retval <error_message> on failure.
*/
{{#asynchronous}}async {{/asynchronous}}function {{name}}({{#params}} {{name}},{{/params}}){
	var _return = [1,null];
	const FUNCTION_NAME = '{{name}}';
	//Variables

	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: Utility.format('received: ', arguments)});
	//Parametre checks
{{#params}}
	if( {{name}} == null {{#default}}){
		{{name}} = {{& default}};
	} else if( {{/default}}{{^default}}|| {{/default}}typeof({{name}}) !== '{{LowerCase low_type}}' ){
		_return = [-2, 'Error: param "{{name}} is either null or not a {{LowerCase low_type}}.'];
	}
{{/params}}
	
	//Function
	if( _return[0] === 1 ){

	}

	//Return
	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: Utility.format('returned: ', _return)});
	return _return;
}
