/**
* @function {{name}}
{{#asynchronous}}* @async
{{/asynchronous}}* @access public
* @description {{&description}}
{{#params}}* @param { {{~type~}} } {{name}} - {{&description}} {{#default}}[default: {{&value}}]{{/default}}
{{/params}}{{#returns}}* @returns { {{~type~}} } {{&description}}
{{/returns}}{{#throws}}* @throws { {{~type~}} } `{{code}}` {{&description}}
{{/throws}}* @since {{&since}}
*/
{{#asynchronous}}async {{/asynchronous}}function {{name}}({{#params}} {{name}}{{#default}} = {{&value}}{{/default}},{{/params}}){
{{#returns}}	var _return;
{{/returns}}{{#throws}}	var return_error;
{{/throws}}	const FUNCTION_NAME = '{{name}}';
	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments}`});
	//Variables
	//Parametre checks
{{#params}}
	if( {{& CheckNotType type name}} ){
		return_error = new TypeError('Param "{{name}}" is not {{type}}.');
		return_error.code = 'ERR_INVALID_ARG_TYPE';
		throw return_error;
	}
{{/params}}
	//Function

	//Return
{{#returns}}	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});
	return _return;
{{/returns ~}} }

/**
* @function {{name}}_Test
{{#asynchronous}}* @async
{{/asynchronous}}* @access private
* @description Tests {{name}}
* @returns {boolean} `true` if all test pass successfully.
{{#throws}}* @throws {Error} If a test fails.
{{/throws}}* @since {{&since}}
*/
{{#asynchronous}}async {{/asynchronous}}function {{name}}_Test(){
	const FUNCTION_NAME = '{{name}}_Test';
	//Variables
	var _return = false;
	var return_error = null;
	//Tests
	//Return
	return _return;
}
