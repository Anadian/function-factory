/**
* @function {{name}}
* @access public
* @description {{description}}
{{#params}}* @param { {{~type~}} } logger - The logger to be used for logging or `null` to disable logging.
* @throws {TypeError} `ERR_INVALID_ARG_TYPE` if logger is not an object or `null`. 
* @since v0.0.0
*/
{{#asynchronous}}async {{/asynchronous}}function {{name}}({{#params}} {{name}},{{/params}}){
	var _return = [1,null];
	const FUNCTION_NAME = '{{name}}';
	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: Utility.format('received: ', arguments)});
	//Variables
	//Parametre checks
{{#params}}
	if( {{name}} == null {{#default}}){
		{{name}} = {{& default}};
	} else if( {{/default}}{{^default}}|| {{/default}}{{&CheckNotType type name}} ){
		_return = [-2, 'Error: param "{{name}}" is either null or not a {{type}}.'];
	}
{{/params}}
	
	//Function
	if( _return[0] === 1 ){

	}

	//Return
	Logger.log({process: PROCESS_NAME, module: MODULE_NAME, file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: Utility.format('returned: ', _return)});
	return _return;
}
