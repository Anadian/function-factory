{{#doc}}/**
### {{&name}}
> {{&description}}

{{#parametres}}#### Parametres
| name | type | description |
| --- | --- | --- |
{{#params}}| {{name}} | {{&type}} | {{&description}} {{#default}}\[default: {{&value}}\]{{/default}} |
{{/params}}

{{/parametres}}{{#return}}#### Returns
| type | description |
| --- | --- |
| {{&type}} | {{&description}} |

{{/return}}
{{#throw}}#### Throws
| code | type | condition |
| --- | --- | --- |
{{#throws}}| '{{code}}' | {{&type}} | {{&description}} |
{{/throws}}

{{/throw}}
#### History
| version | change |
| --- | --- |
| 0.0.1 | WIP |
*/{{/doc}}
{{#func}}{{#asynchronous}}async {{/asynchronous}}function {{&name}}({{#parametres}}{{#params}} {{name}}{{#default}} = {{&value}}{{/default}},{{/params}}{{/parametres}}){
	const FUNCTION_NAME = '{{name}}';
	//Variables
	var arguments_array = Array.from(arguments);
{{#return}}	var _return;
{{/return}}{{#throw}}	var return_error = null;
{{/throw}}
	this.logger.log({file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `received: ${arguments_array}`});
{{#parametres}}	//Parametre checks
{{#params}}
	if( {{& CheckNotType type name}} ){
		return_error = new TypeError('Param "{{name}}" is not {{type}}.');
		return_error.code = 'ERR_INVALID_ARG_TYPE';
		throw return_error;
	}
{{/params}}{{/parametres}}
	//Function

{{#return}}	//Return
	this.logger.log({file: FILENAME, function: FUNCTION_NAME, level: 'debug', message: `returned: ${_return}`});
	return _return;
{{/return ~}} }{{/func}}
