#!/usr/bin/make
#Options
ifeq ($(origin VERBOSE),undefined)
VERBOSE=0
endif #($(origin VERBOSE),undefined)
ifeq ($(VERBOSE),1)
$(info VERBOSE:$(VERBOSE))
endif #($(VERBOSE),1)

#Project Metadata
mkvar(NAME,{{project_name}})

mkvar(PROJECT_DIRECTORY,$(shell pwd))

mkvar(GIT_CURRENT,$(shell git-current))

mkvar(GIT_COMMIT,$(subst commit ,commit-,$(GIT_CURRENT))

#Phases
##Pre-build
mkvar(PHASE_PREPARE,{{phase_prepare}})

mkvar(PHASE_GIT_PULL,{{phase_git_pull}})

mkvar(PHASE_COPY,{{phase_copy}})

mkvar(PHASE_LINT,{{phase_lint}})

mkvar(PHASE_DIRECTORIES,{{phase_directories}})

##Build
mkvar(PHASE_BUILD,{{phase_build}})

mkvar(PHASE_COMPILE,{{phase_compile}})

mkvar(PHASE_LINK,{{phase_link}})

##Test
mkvar(PHASE_TEST,{{phase_test}})

mkvar(PHASE_RUN,{{phase_run}})

##Post-Build
mkvar(PHASE_PACKAGE,{{phase_package}})

mkvar(PHASE_INSTALL,{{phase_install}})

mkvar(PHASE_RELEASE,{{phase_release}})

mkvar(PHASE_DISTRIBUTE,{{phase_distribute}})

mkvar(PHASE_GIT_PUSH,{{phase_git_push}})

##Cleanup
mkvar(PHASE_CLEANUP,{{phase_cleanup}})

mkvar(PHASE_UNINSTALL,{{phase_uninstall}})


#System Information
#mkvar(PROCESSOR,$(shell uname -p))
ifeq ($(origin PROCESSOR),undefined)
PROCESSOR=$(shell uname -p)
endif #($(origin PROCESSOR),undefined)
ifeq ($(VERBOSE),1)
$(info PROCESSOR:$(PROCESSOR))
endif #($(VERBOSE),1)


#mkvar(ARCHITECTURE,$(shell uname -m))
ifeq ($(origin ARCHITECTURE),undefined)
ARCHITECTURE=$(shell uname -m)
endif #($(origin ARCHITECTURE),undefined)
ifeq ($(VERBOSE),1)
$(info ARCHITECTURE:$(ARCHITECTURE))
endif #($(VERBOSE),1)


#mkvar(KERNEL,$(shell uname -s))
ifeq ($(origin KERNEL),undefined)
KERNEL=$(shell uname -s)
endif #($(origin KERNEL),undefined)
ifeq ($(VERBOSE),1)
$(info KERNEL:$(KERNEL))
endif #($(VERBOSE),1)


#mkvar(KERNEL_RELEASE,$(shell uname -r))
ifeq ($(origin KERNEL_RELEASE),undefined)
KERNEL_RELEASE=$(shell uname -r)
endif #($(origin KERNEL_RELEASE),undefined)
ifeq ($(VERBOSE),1)
$(info KERNEL_RELEASE:$(KERNEL_RELEASE))
endif #($(VERBOSE),1)


#mkvar(OPERATING_SYSTEM,$(shell uname -o))
ifeq ($(origin OPERATING_SYSTEM),undefined)
OPERATING_SYSTEM=$(shell uname -o)
endif #($(origin OPERATING_SYSTEM),undefined)
ifeq ($(VERBOSE),1)
$(info OPERATING_SYSTEM:$(OPERATING_SYSTEM))
endif #($(VERBOSE),1)


#Build Informations
mkvar(COMPILER,babel)

mkvar(RUNTIME,node)


##Directories
#mkvar(SOURCE_DIRECTORY,./source)
ifeq ($(origin SOURCE_DIRECTORY),undefined)
SOURCE_DIRECTORY=./source
endif #($(origin SOURCE_DIRECTORY),undefined)
ifeq ($(VERBOSE),1)
$(info SOURCE_DIRECTORY:$(SOURCE_DIRECTORY))
endif #($(VERBOSE),1)

mkvar(MODULE_DIRECTORY,./node/npm/node_modules)

#mkvar(OUTPUT_DIRECTORY,./OUTPUT)
ifeq ($(origin OUTPUT_DIRECTORY),undefined)
OUTPUT_DIRECTORY=./OUTPUT
endif #($(origin OUTPUT_DIRECTORY),undefined)
ifeq ($(VERBOSE),1)
$(info OUTPUT_DIRECTORY:$(OUTPUT_DIRECTORY))
endif #($(VERBOSE),1)


###Sanity Checks
ifeq ($(wildcard $(OUTPUT_DIRECTORY)/*),)
$(shell mkdir $(OUTPUT_DIRECTORY))
endif #($(wildcard $(OUTPUT_DIRECTORY)/*),)

##Files
#mkvar(SOURCE_FILES,$(wildcard $(SOURCE_DIRECTORY)/*.js))
ifeq ($(origin SOURCE_FILES),undefined)
SOURCE_FILES=$(wildcard $(SOURCE_DIRECTORY)/*.js)
endif #($(origin SOURCE_FILES),undefined)
ifeq ($(VERBOSE),1)
$(info SOURCE_FILES:$(SOURCE_FILES))
endif #($(VERBOSE),1)

#Flags
#mkvar(FLAG_PREDEFINED_MACROS,-DMAKE_GIT_COMMIT=$(GIT_COMMIT))
ifeq ($(origin FLAG_PREDEFINED_MACROS),undefined)
FLAG_PREDEFINED_MACROS=-DMAKE_GIT_COMMIT=$(GIT_COMMIT)
endif #($(origin FLAG_PREDEFINED_MACROS),undefined)
ifeq ($(VERBOSE),1)
$(info FLAG_PREDEFINED_MACROS:$(FLAG_PREDEFINED_MACROS))
endif #($(VERBOSE),1)

#mkvar(DEBUG_FLAGS,)
ifeq ($(origin DEBUG_FLAGS),undefined)
DEBUG_FLAGS=
endif #($(origin DEBUG_FLAGS),undefined)
ifeq ($(VERBOSE),1)
$(info DEBUG_FLAGS:$(DEBUG_FLAGS))
endif #($(VERBOSE),1)


#mkvar(FLAGS,$(FLAG_PREDEFINED_MACROS) $(DEBUG_FLAGS))

#Recipes
##GNU_Make
.PHONY: copy-dependencies expand noop help
	

##Development
copy-dependencies: 
	cd $(PROJECT_DIRECTORY)
	
expand:
	cd $(PROJECT_DIRECTORY)
	vim -S ~/.external_expand source/*.js

noop:
	

help:
	$(info Available commands, with synonyms:)
	$(info help: Display this help text.)
	$(info noop: Print configuration variables and exit.)

